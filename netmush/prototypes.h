/**
 * @file prototypes.h.in
 * @author TinyMUSH development team (https://github.com/TinyMUSH)
 * @brief Functions prototypes
 * @version 3.3
 * @date 2021-01-04
 *
 * @copyright Copyright (C) 1989-2021 TinyMUSH development team.
 *            You may distribute under the terms the Artistic License,
 *            as specified in the COPYING file.
 *
 */

#ifndef __PROTOTYPES_H
#define __PROTOTYPES_H

#include <stdlib.h>
#include <stdarg.h>
#include <stdio.h>
#include <netinet/in.h>
#include <sys/time.h>

#include "typedefs.h"

/* alloc.c */
extern void *__xmalloc(size_t size, const char *file, int line, const char *function, const char *var);
extern void *__xcalloc(size_t nmemb, size_t size, const char *file, int line, const char *function, const char *var);
extern void *__xrealloc(void *ptr, size_t size, const char *file, int line, const char *function, const char *var);
extern MEMTRACK *__xfind(void *ptr);
extern int __xcheck(void *ptr);
extern int __xfree(void *ptr);
extern char *__xasprintf(const char *file, int line, const char *function, const char *var, const char *format, ...);
extern char *__xavsprintf(const char *file, int line, const char *function, const char *var, const char *format, va_list va);
extern int __xsprintf(char *str, const char *format, ...);
extern int __xvsprintf(char *str, const char *format, va_list ap);
extern int __xsnprintf(char *str, size_t size, const char *format, ...);
extern int __xvsnprintf(char *str, size_t size, const char *format, va_list ap);
extern int __xsprintfcat(char *str, const char *format, ...);
extern char *__xsafesprintf(char *buff, char **bufp, const char *format, ...);
extern char *__xstrdup(const char *s, const char *file, int line, const char *function, const char *var);
extern char *__xstrndup(const char *s, size_t n, const char *file, int line, const char *function, const char *var);
extern char *__xstpcpy(char *dest, const char *src);
extern char *__xstrcat(char *dest, const char *src);
extern char *__xstrncat(char *dest, const char *src, size_t n);
extern char *__xstrccat(char *dest, const char src);
extern char *__xstrnccat(char *dest, const char src, size_t n);
extern char *__xstrcpy(char *dest, const char *src);
extern char *__xstrncpy(char *dest, const char *src, size_t n);
extern void *__xmemmove(void *dest, const void *src, size_t n);
extern void *__xmempcpy(void *dest, const void *src, size_t n);
extern void *__xmemccpy(void *dest, const void *src, int c, size_t n);
extern void *__xmemset(void *s, int c, size_t n);
extern void list_bufstats(dbref player);
extern void list_buftrace(dbref player);
extern int __xsorttrace(const void *p1, const void *p2);
extern void list_rawmemory(dbref player);
extern size_t total_rawmemory(void);
extern size_t __xsafestrncpy(char *dest, char **destp, const char *src, size_t n, size_t size);
extern int __xsafestrcatchr(char *dest, char **destp, char c, size_t size);
extern size_t __xsafestrncat(char *dest, char **destp, const char *src, size_t n, size_t size);
extern void __xsafeltos(char *dest, char **destp, long num, size_t size);
extern char *__xrepeatchar(size_t size, char c);

/* api.c */
extern void register_api(char *module_name, char *api_name, API_FUNCTION *ftable);
extern void *request_api_function(char *api_name, char *fn_name);
extern void register_commands(CMDENT *cmdtab);
extern void register_prefix_cmds(const char *cmdchars);
extern void register_functions(FUN *functab);
extern void register_hashtables(MODHASHES *htab, MODHASHES *ntab);
extern unsigned int register_dbtype(char *modname);

/* boolexp.c */
extern _Bool check_attr(dbref player, dbref lockobj, ATTR *attr, char *key);
extern BOOLEXP *alloc_boolexp(void);
extern void free_boolexp(BOOLEXP *b);
extern _Bool eval_boolexp(dbref player, dbref thing, dbref from, BOOLEXP *b);
extern _Bool eval_boolexp_atr(dbref player, dbref thing, dbref from, char *key);
extern void skip_whitespace(char **pBuf);
extern BOOLEXP *test_atr(char *s, dbref parse_player);
extern BOOLEXP *parse_boolexp_L(char **pBuf, dbref parse_player, _Bool parsing_internal);
extern BOOLEXP *parse_boolexp_F(char **pBuf, dbref parse_player, _Bool parsing_internal);
extern BOOLEXP *parse_boolexp_T(char **pBuf, dbref parse_player, _Bool parsing_internal);
extern BOOLEXP *parse_boolexp_E(char **pBuf, dbref parse_player, _Bool parsing_internal);
extern BOOLEXP *parse_boolexp(dbref player, const char *buf, _Bool internal);

/* bsd.c */
extern MSGQ_DNSRESOLVER mk_msgq_dnsresolver(const char *addr);
extern void *dnsResolver(void *args);
extern void check_dnsResolver_status(dbref player, dbref cause, int key);
extern int make_socket(int port);
extern void shovechars(int port);
extern DESC *new_connection(int sock);
extern char *connReasons(int reason);
extern char *connMessages(int reason);
extern void shutdownsock(DESC *d, int reason);
extern void make_nonblocking(int s);
extern DESC *initializesock(int s, struct sockaddr_in *a);
extern int process_output(DESC *d);
extern int process_input(DESC *d);
extern void close_sockets(int emergency, char *message);
extern void emergency_shutdown(void);
extern void report(void);
extern void sighandler(int sig);
extern void set_signals(void);
extern void unset_signals(void);
extern void check_panicking(int sig);
extern void log_signal(const char *signame);

/* command.c */
extern void init_cmdtab(void);
extern void reset_prefix_cmds(void);
extern _Bool check_access(dbref player, int mask);
extern _Bool check_mod_access(dbref player, EXTFUNCS *xperms);
extern _Bool check_userdef_access(dbref player, HOOKENT *hookp, char *cargs[], int ncargs);
extern void process_hook(HOOKENT *hp, int save_globs, dbref player, dbref cause, char *cargs[], int ncargs);
extern void call_move_hook(dbref player, dbref cause, _Bool state);
extern _Bool check_cmd_access(dbref player, CMDENT *cmdp, char *cargs[], int ncargs);
extern void process_cmdent(CMDENT *cmdp, char *switchp, dbref player, dbref cause, _Bool interactive, char *arg, char *unp_command, char *cargs[], int ncargs);
extern char *process_command(dbref player, dbref cause, int interactive, char *command, char *args[], int nargs);
extern void process_cmdline(dbref player, dbref cause, char *cmdline, char *args[], int nargs, BQUE *qent);
extern void list_cmdtable(dbref player);
extern void list_attrtable(dbref player);
extern void helper_list_cmdaccess(dbref player, CMDENT *ctab);
extern void list_cmdaccess(dbref player);
extern void list_cmdswitches(dbref player);
extern void list_attraccess(dbref player);
extern void list_attrtypes(dbref player);
extern int cf_access(int *vp, char *str, long extra, dbref player, char *cmd);
extern int cf_acmd_access(int *vp, char *str, long extra, dbref player, char *cmd);
extern int cf_attr_access(int *vp, char *str, long extra, dbref player, char *cmd);
extern int cf_attr_type(int *vp, char *str, long extra, dbref player, char *cmd);
extern int cf_cmd_alias(int *vp, char *str, long extra, dbref player, char *cmd);
extern void list_df_flags(dbref player);
extern void list_costs(dbref player);
extern void list_params(dbref player);
extern void list_vattrs(dbref player);
extern void list_hashstat(dbref player, const char *tab_name, HASHTAB *htab);
extern void list_nhashstat(dbref player, const char *tab_name, HASHTAB *htab);
extern void list_hashstats(dbref player);
extern void list_textfiles(dbref player);
extern void list_db_stats(dbref player);
extern void list_process(dbref player);
extern void print_memory(dbref player, const char *item, size_t size);
extern void list_memory(dbref player);
extern void do_list(dbref player, dbref cause, int extra, char *arg);

/* conf.c */
extern void cf_init(void);
extern void cf_log(dbref player, const char *primary, const char *secondary, char *cmd, const char *format, ...);
extern CF_Result cf_status_from_succfail(dbref player, char *cmd, int success, int failure);
extern CF_Result cf_const(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_int(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_int_factor(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_dbref(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_module(int *vp, char *modname, long extra, dbref player, char *cmd);
extern CF_Result cf_bool(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_option(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_string(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_alias(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_infotext(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_divert_log(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_modify_bits(int *vp, char *str, long extra, dbref player, char *cmd);
extern _Bool modify_xfuncs(char *fn_name, int (*fn_ptr)(dbref), EXTFUNCS **xfuncs, _Bool negate);
extern CF_Result parse_ext_access(int *perms, EXTFUNCS **xperms, char *str, NAMETAB *ntab, dbref player, char *cmd);
extern CF_Result cf_set_flags(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_badname(int *vp, char *str, long extra, dbref player, char *cmd);
extern in_addr_t sane_inet_addr(char *str);
extern CF_Result cf_site(long **vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result helper_cf_cf_access(CONF *tp, dbref player, int *vp, char *ap, char *cmd, long extra);
extern CF_Result cf_cf_access(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result add_helpfile(dbref player, char *confcmd, char *str, _Bool is_raw);
extern CF_Result cf_helpfile(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_raw_helpfile(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result cf_include(int *vp, char *str, long extra, dbref player, char *cmd);
extern CF_Result helper_cf_set(char *cp, char *ap, dbref player, CONF *tp);
extern CF_Result cf_set(char *cp, char *ap, dbref player);
extern void do_admin(dbref player, dbref cause, int extra, char *kw, char *value);
extern CF_Result cf_read(char *fn);
extern void list_cf_access(dbref player);
extern void list_cf_read_access(dbref player);
extern void cf_verify(void);
extern void helper_cf_display(dbref player, char *buff, char **bufc, CONF *tp);
extern void cf_display(dbref player, char *param_name, char *buff, char **bufc);
extern void list_options(dbref player);
extern void *dlopen_format(const char *filename, ...);
extern void *dlsym_format(void *place, const char *symbol, ...);

/* cque.c */
extern void delete_qentry(BQUE *qptr);
extern int add_to(dbref doer, dbref player, int am, int attrnum);
extern void give_que(BQUE *tmp);
extern _Bool que_want(BQUE *entry, dbref ptarg, dbref otarg);
extern int halt_que(dbref player, dbref object);
extern void remove_waitq(BQUE *qptr);
extern void do_halt_pid(dbref player, dbref cause, int key, char *pidstr);
extern void do_halt(dbref player, dbref cause, int key, char *target);
extern int nfy_que(dbref player, dbref sem, int attr, int key, int count);
extern void do_notify(dbref player, dbref cause, int key, char *what, char *count);
extern int qpid_next(void);
extern BQUE *setup_que(dbref player, dbref cause, char *command, char *args[], int nargs, GDATA *gargs);
extern void wait_que(dbref player, dbref cause, int wait, dbref sem, int attr, char *command, char *args[], int nargs, GDATA *gargs);
extern void do_wait_pid(dbref player, int key, char *pidstr, char *timestr);
extern void do_wait(dbref player, dbref cause, int key, char *event, char *cmd, char *cargs[], int ncargs);
extern int que_next(void);
extern void do_second(void);
extern int do_top(int ncmds);
extern void show_que(dbref player, int key, BQUE *queue, int *qtot, int *qent, int *qdel, dbref player_targ, dbref obj_targ, const char *header);
extern void do_ps(dbref player, dbref cause, int key, char *target);
extern void do_queue(dbref player, dbref cause, int key, char *arg);

/* create.c */
extern dbref parse_linkable_room(dbref player, char *room_name);
extern void open_exit(dbref player, dbref loc, char *direction, char *linkto);
extern void do_open(dbref player, dbref cause, int key, char *direction, char *links[], int nlinks);
extern void link_exit(dbref player, dbref exit, dbref dest);
extern void do_link(dbref player, dbref cause, int key, char *what, char *where);
extern void do_parent(dbref player, dbref cause, int key, char *tname, char *pname);
extern void do_dig(dbref player, dbref cause, int key, char *name, char *args[], int nargs);
extern void do_create(dbref player, dbref cause, int key, char *name, char *coststr);
extern void do_clone(dbref player, dbref cause, int key, char *name, char *arg2);
extern void do_pcreate(dbref player, dbref cause, int key, char *name, char *pass);
extern _Bool can_destroy_exit(dbref player, dbref exit);
extern _Bool destroyable(dbref victim);
extern _Bool can_destroy_player(dbref player, dbref victim);
extern void do_destroy(dbref player, dbref cause, int key, char *what);

/* db.c */
extern void tf_xclose(FILE *fd);
extern int tf_fiddle(int tfd);
extern int tf_xopen(char *fname, int mode);
extern const char *mode_txt(int mode);
extern void tf_init(void);
extern int tf_open(char *fname, int mode);
extern void tf_close(int fdes);
extern FILE *tf_fopen(char *fname, int mode);
extern void tf_fclose(FILE *fd);
extern FILE *tf_popen(char *fname, int mode);
extern void fwdlist_set(dbref thing, FWDLIST *ifp);
extern void fwdlist_clr(dbref thing);
extern int fwdlist_load(FWDLIST *fp, dbref player, char *atext);
extern int fwdlist_rewrite(FWDLIST *fp, char *atext);
extern int fwdlist_ck(int key, dbref player, dbref thing, int anum, char *atext);
extern FWDLIST *fwdlist_get(dbref thing);
extern void propdir_set(dbref thing, PROPDIR *ifp);
extern void propdir_clr(dbref thing);
extern int propdir_load(PROPDIR *fp, dbref player, char *atext);
extern int propdir_rewrite(PROPDIR *fp, char *atext);
extern int propdir_ck(int key, dbref player, dbref thing, int anum, char *atext);
extern PROPDIR *propdir_get(dbref thing);
extern void safe_name(dbref thing, char *outbuf, char **bufc);
extern char *Name(dbref thing);
extern char *PureName(dbref thing);
extern void s_Name(dbref thing, char *s);
extern void safe_exit_name(dbref it, char *buff, char **bufc);
extern void s_Pass(dbref thing, const char *s);
extern void do_attribute(dbref player, dbref cause, int key, char *aname, char *value);
extern void do_fixdb(dbref player, dbref cause, int key, char *arg1, char *arg2);
extern void init_attrtab(void);
extern ATTR *atr_str(char *s);
extern void anum_extend(int newtop);
extern ATTR *atr_num(int anum);
extern int mkattr(char *buff);
extern int al_decode(char **app);
extern void al_code(char **app, int atrnum);
extern _Bool Commer(dbref thing);
extern void al_extend(char **buffer, int *bufsiz, int len, _Bool copy);
extern int al_size(char *astr);
extern void al_store(void);
extern char *al_fetch(dbref thing);
extern void al_add(dbref thing, int attrnum);
extern void al_delete(dbref thing, int attrnum);
extern void makekey(dbref thing, int atr, UDB_ANAME *abuff);
extern void al_destroy(dbref thing);
extern char *atr_encode(char *iattr, dbref thing, dbref owner, int flags, int atr);
extern void atr_decode(char *iattr, char *oattr, dbref thing, dbref *owner, int *flags, int atr, int *alen);
extern void atr_clr(dbref thing, int atr);
extern void atr_add_raw(dbref thing, int atr, char *buff);
extern void atr_add(dbref thing, int atr, char *buff, dbref owner, int flags);
extern void atr_set_owner(dbref thing, int atr, dbref owner);
extern void atr_set_flags(dbref thing, int atr, dbref flags);
extern char *atr_get_raw(dbref thing, int atr);
extern char *atr_get_str(char *s, dbref thing, int atr, dbref *owner, int *flags, int *alen);
extern char *atr_get(dbref thing, int atr, dbref *owner, int *flags, int *alen);
extern _Bool atr_get_info(dbref thing, int atr, dbref *owner, int *flags);
extern char *atr_pget_str(char *s, dbref thing, int atr, dbref *owner, int *flags, int *alen);
extern char *atr_pget(dbref thing, int atr, dbref *owner, int *flags, int *alen);
extern int atr_pget_info(dbref thing, int atr, dbref *owner, int *flags);
extern void atr_free(dbref thing);
extern void atr_cpy(dbref player, dbref dest, dbref source);
extern void atr_chown(dbref obj);
extern int atr_next(char **attrp);
extern void atr_push(void);
extern void atr_pop(void);
extern int atr_head(dbref thing, char **attrp);
extern void initialize_objects(dbref first, dbref last);
extern void db_grow(dbref newtop);
extern void db_free(void);
extern void db_make_minimal(void);
extern dbref parse_dbref_only(const char *s);
extern dbref parse_objid(const char *s, const char *p);
extern dbref parse_dbref(const char *s);
extern void putstring(FILE *f, const char *s);
extern void putref(FILE *f, int d);
extern void putlong(FILE *f, long l);
extern char *getstring(FILE *f, _Bool new_strings);
extern dbref getref(FILE *f);
extern long getlong(FILE *f);
extern int init_gdbm_db(char *gdbmfile);
extern _Bool check_zone(dbref player, dbref thing);
extern _Bool check_zone_for_player(dbref player, dbref thing);
extern void dump_restart_db(void);
extern void load_restart_db(void);

/* db_rw.c */
extern BOOLEXP *getboolexp1(FILE *f);
extern BOOLEXP *getboolexp(FILE *f);
extern int unscramble_attrnum(int attrnum);
extern void get_list(FILE *f, dbref i, int new_strings);
extern void putbool_subexp(FILE *f, BOOLEXP *b);
extern void putboolexp(FILE *f, BOOLEXP *b);
extern void upgrade_flags(FLAG *flags1, FLAG *flags2, FLAG *flags3, dbref thing, int db_format, int db_version);
extern void efo_convert(void);
extern void fix_mux_zones(void);
extern void fix_typed_quotas(void);
extern dbref db_read_flatfile(FILE *f, int *db_format, int *db_version, int *db_flags);
extern int db_read(void);
extern int db_write_object_out(FILE *f, dbref i, int db_format, int flags, int *n_atrt);
extern dbref db_write_flatfile(FILE *f, int format, int version);
extern dbref db_write(void);
extern FILE *db_module_flatfile(char *filename, _Bool wrflag);

/* eval.c */
extern char *parse_to_cleanup(int eval, _Bool first, char *cstr, char *rstr, char *zstr);
extern char *parse_to(char **dstr, char delim, int eval);
extern char *parse_arglist(dbref player, dbref caller, dbref cause, char *dstr, char delim, dbref eval, char *fargs[], dbref nfargs, char *cargs[], dbref ncargs);
extern int get_gender(dbref player);
extern void tcache_init(void);
extern int tcache_empty(void);
extern void tcache_add(char *orig, char *result);
extern void tcache_finish(dbref player);
extern _Bool special_char(unsigned char ch);
extern _Bool token_char(int ch);
extern char *get_subj(int subj);
extern char *get_poss(int poss);
extern char *get_obj(int obj);
extern char *get_absp(int absp);
extern void exec(char *buff, char **bufc, dbref player, dbref caller, dbref cause, int eval, char **dstr, char *cargs[], int ncargs);
extern GDATA *save_global_regs(const char *funcname);
extern void restore_global_regs(const char *funcname, GDATA *preserve);

/* file_c.c */
extern void do_list_file(dbref player, dbref cause, int extra, char *arg);
extern FBLOCK *fcache_fill(FBLOCK *fp, char ch);
extern int fcache_read(FBLOCK **cp, char *filename);
extern void fcache_rawdump(int fd, int num);
extern void fcache_dump(DESC *d, int num);
extern void fcache_send(dbref player, int num);
extern void fcache_load(dbref player);
extern void fcache_init(void);

/* flags.c */
extern int fh_any(dbref target, dbref player, FLAG flag, int fflags, int reset);
extern int fh_god(dbref target, dbref player, FLAG flag, int fflags, int reset);
extern int fh_wiz(dbref target, dbref player, FLAG flag, int fflags, int reset);
extern int fh_wizroy(dbref target, dbref player, FLAG flag, int fflags, int reset);
extern int fh_restrict_player(dbref target, dbref player, FLAG flag, int fflags, int reset);
extern int fh_privileged(dbref target, dbref player, FLAG flag, int fflags, int reset);
extern int fh_inherit(dbref target, dbref player, FLAG flag, int fflags, int reset);
extern int fh_dark_bit(dbref target, dbref player, FLAG flag, int fflags, int reset);
extern int fh_going_bit(dbref target, dbref player, FLAG flag, int fflags, int reset);
extern int fh_hear_bit(dbref target, dbref player, FLAG flag, int fflags, int reset);
extern int fh_player_bit(dbref target, dbref player, FLAG flag, int fflags, int reset);
extern int fh_power_bit(dbref target, dbref player, FLAG flag, int fflags, int reset);
extern void init_flagtab(void);
extern void display_flagtab(dbref player);
extern FLAGENT *find_flag(dbref thing, char *flagname);
extern void flag_set(dbref target, dbref player, char *flag, int key);
extern char *decode_flags(dbref player, FLAGSET flagset);
extern char *unparse_flags(dbref player, dbref thing);
extern int has_flag(dbref player, dbref it, char *flagname);
extern char *flag_description(dbref player, dbref target);
extern char *unparse_object_numonly(dbref target);
extern char *unparse_object(dbref player, dbref target, int obey_myopic);
extern FLAGENT *letter_to_flag(char this_letter);
extern int cf_flag_access(int *vp, char *str, long extra, dbref player, char *cmd);
extern int cf_flag_name(int *vp, char *str, long extra, dbref player, char *cmd);
extern int convert_flags(dbref player, char *flaglist, FLAGSET *fset, FLAG *p_type);
extern void decompile_flags(dbref player, dbref thing, char *thingname);

/* fnhelper.c */
extern char *trim_space_sep(char *str, const Delim *sep);
extern char *next_token(char *str, const Delim *sep);
extern char *split_token(char **sp, const Delim *sep);
extern char *next_token_ansi(char *str, const Delim *sep, int *ansi_state_ptr);
extern int countwords(char *str, const Delim *sep);
extern int list2arr(char ***arr, int maxtok, char *list, const Delim *sep);
extern void print_separator(const Delim *sep, char *list, char **bufc);
extern void arr2list(char **arr, int alen, char *list, char **bufc, const Delim *sep);
extern int list2ansi(int *arr, int *prior_state, int maxlen, char *list, const Delim *sep);
extern dbref match_thing(dbref player, char *name);
extern _Bool fn_range_check(const char *fname, int nfargs, int minargs, int maxargs, char *result, char **bufc);
extern int delim_check(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs, int sep_arg, Delim *sep, int dflags);
extern _Bool xlate(char *arg);
extern void do_reverse(char *from, char *to);
extern uint32_t random_range(uint32_t low, uint32_t high);
extern void pcg32_srandom_r(pcg32_random_t *rng, uint64_t initstate, uint64_t initseq);
extern uint32_t pcg32_random_r(pcg32_random_t *rng);
extern uint32_t pcg32_boundedrand_r(pcg32_random_t *rng, uint32_t bound);

/* functions.c */
extern void init_functab(void);
extern void do_function(dbref player, dbref cause, int key, char *fname, char *target);
extern void list_functable(dbref player);
extern void helper_list_funcaccess(dbref player, FUN *fp);
extern void list_funcaccess(dbref player);
extern int cf_func_access(int *vp, char *str, long extra, dbref player, char *cmd);

/* funext.c */
extern void fun_config(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lwho(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ports(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_doing(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_conninfo(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_session(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_programmer(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_helptext(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_html_escape(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_html_unescape(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern _Bool escaped_chars(unsigned char ch);
extern void fun_url_escape(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_url_unescape(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);

/* funiter.c */
extern void perform_loop(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void perform_iter(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ilev(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_inum(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_itext(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_itext2(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ibreak(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_fold(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_filter(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_map(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_mix(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_step(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_foreach(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_munge(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_while(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);

/* funlist.c */
extern int autodetect_list(char *ptrs[], int nitems);
extern int get_list_type(char *fargs[], int nfargs, int type_pos, char *ptrs[], int nitems);
extern int dbnum(char *dbr);
extern void fun_words(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_first(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_rest(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_last(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_match(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_matchall(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_extract(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_index(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void do_itemfuns(char *buff, char **bufc, char *str, int el, char *word, const Delim *sep, int flag);
extern void fun_ldelete(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_replace(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_insert(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lreplace(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_remove(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_member(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_revwords(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_splice(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern int a_comp(const void *s1, const void *s2);
extern int c_comp(const void *s1, const void *s2);
extern int arec_comp(const void *s1, const void *s2);
extern int crec_comp(const void *s1, const void *s2);
extern int f_comp(const void *s1, const void *s2);
extern int i_comp(const void *s1, const void *s2);
extern int *do_asort(char *s[], int n, int sort_type, int listpos_only);
extern void handle_sort(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern int u_comp(const void *s1, const void *s2, char *cbuff, dbref thing, dbref player, dbref cause);
extern void sane_qsort(void *array[], int left, int right, int (*compare)(const void *, const void *, char *, dbref, dbref, dbref), char *cbuff, dbref thing, dbref player, dbref cause);
extern void fun_sortby(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_sets(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_columns(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void tables_helper(char *list, int *last_state, int n_cols, int col_widths[], char *lead_str, char *trail_str, const Delim *list_sep, const Delim *field_sep, const Delim *pad_char, char *buff, char **bufc, int just);
extern void perform_tables(dbref player, char *list, int n_cols, int col_widths[], char *lead_str, char *trail_str, const Delim *list_sep, const Delim *field_sep, const Delim *pad_char, char *buff, char **bufc, int just);
extern void process_tables(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_table(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_elements(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_exclude(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_grab(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_graball(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void swap(char **p, char **q);
extern void fun_shuffle(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ledit(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_itemize(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_choose(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_group(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_tokens(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);

/* funmath.c */
extern unsigned int fp_check_weird(char *buff, char **bufc, long double result);
extern void fval(char *buff, char **bufc, long double result, int precision);
extern void fun_pi(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_e(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_sign(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_abs(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_floor(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ceil(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_round(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_trunc(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_inc(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_dec(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_sqrt(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_exp(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ln(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_trig(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern int fromBaseX(char ch, int base);
extern char toBaseX(int i, int base);
extern void fun_baseconv(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_gt(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_gte(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lt(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lte(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_eq(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_neq(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ncomp(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_sub(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_div(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_floordiv(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_fdiv(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_modulo(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_remainder(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_power(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_log(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_shl(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_shr(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_band(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_bor(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_bnand(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_add(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_mul(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_max(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_min(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_bound(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_dist2d(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_dist3d(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ladd(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lmax(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lmin(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_vector(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_vectors(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_not(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_notbool(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_t(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern _Bool cvtfun(int flag, char *str);
extern void handle_logic(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_listbool(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);

/* funmisc.c */
extern void fun_switchall(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_switch(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_case(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_ifelse(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_rand(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_die(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lrand(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lnum(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_time(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_secs(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_convsecs(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern _Bool do_convtime(char *str, struct tm *ttm);
extern void fun_convtime(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_timefmt(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_etimefmt(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_starttime(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_restarts(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_restarttime(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_version(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_mushname(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_modules(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_hasmodule(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_connrecord(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_fcount(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_fdepth(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ccount(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_cdepth(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_benchmark(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_s(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_subeval(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern _Bool check_command(dbref player, char *name, char *buff, char **bufc, char *cargs[], int ncargs);
extern void fun_link(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_tel(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_wipe(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_pemit(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_remit(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_oemit(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_force(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_trigger(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_wait(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_command(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_create(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_set(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void list_qpids(dbref player_targ, dbref obj_targ, BQUE *queue, char *buff, char **bufc, char *bb_p);
extern void fun_ps(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);

/* funobj.c */
extern void fun_objid(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_con(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_exit(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_next(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_loc(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_rloc(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_room(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_owner(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_controls(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_sees(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_nearby(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_okpres(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_name(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_pronoun(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lock(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_elock(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_elockstr(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_xcon(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lcon(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lexits(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_entrances(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_home(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_money(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_findable(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_visible(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_writable(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_flags(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_flaglists(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern _Bool atr_has_flag(dbref player, dbref thing, ATTR *attr, int aowner, int aflags, char *flagname);
extern void fun_hasflag(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_haspower(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_hasflags(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_timestamp(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_parent(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lparent(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_children(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_zone(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void scan_zone(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_zfun(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_hasattr(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_v(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void perform_get(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_eval(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void do_ufun(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_objcall(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_localize(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_private(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_default(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_edefault(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_udefault(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_objeval(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_num(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_pmatch(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_pfind(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_locate(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_lattr(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_search(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_stats(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern size_t mem_usage(dbref thing);
extern size_t mem_usage_attr(dbref player, char *str);
extern void fun_objmem(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_playmem(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_type(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_hastype(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lastcreate(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void transform_say(dbref speaker, char *sname, char *str, int key, char *say_str, char *trans_str, char *empty_str, const Delim *open_sep, const Delim *close_sep, dbref player, dbref caller, dbref cause, char *buff, char **bufc);
extern void fun_speak(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);

/* funstring.c */
extern void fun_isword(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_isalnum(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_isnum(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_isdbref(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_isobjid(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_null(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_squish(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_trim(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_after(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_before(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lcstr(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ucstr(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_capstr(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_space(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ljust(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_rjust(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_center(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_left(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_right(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_chomp(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_comp(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_streq(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_strmatch(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_edit(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_merge(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_secure(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_escape(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_esc(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_stripchars(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ansi(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_stripansi(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void crunch_code(char *code);
extern void crypt_code(char *buff, char **bufc, char *code, char *text, int type);
extern void fun_encrypt(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_decrypt(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_scramble(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_reverse(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_mid(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_translate(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_pos(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lpos(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_diffpos(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_wordpos(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_ansipos(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_repeat(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void perform_border(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void perform_align(int n_cols, char **raw_colstrs, char **data, char fillc, Delim col_sep, Delim row_sep, char *buff, char **bufc);
extern void fun_align(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lalign(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_cat(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_strcat(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_join(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_strlen(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_delete(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lit(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_art(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_alphamax(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_alphamin(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_valid(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_beep(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);

/* funvars.c */
extern char qidx_chartab(int ch);
extern char qidx_str(int id);
extern int set_register(const char *funcname, char *name, char *data);
extern char *get_register(GDATA *g, char *r);
extern void fun_setq(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_setr(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void read_register(char *regname, char *buff, char **bufc);
extern void fun_r(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lregs(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_wildmatch(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_qvars(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_qsub(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern int calc_limitmask(char *lstr);
extern void fun_nofx(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern char is_in_array(char *word, char **list, int list_length);
extern void handle_ucall(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void print_htab_matches(dbref obj, HASHTAB *htab, char *buff, char **bufc);
extern void set_xvar(dbref obj, char *name, char *data);
extern void clear_xvars(dbref obj, char **xvar_names, int n_xvars);
extern void xvars_clr(dbref player);
extern void fun_x(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_setx(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_store(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_xvars(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_let(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lvars(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_clearvars(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern int istype_char(char *str);
extern int istype_dbref(char *str);
extern int istype_int(char *str);
extern int istype_float(char *str);
extern int istype_string(char *str);
extern void fun_structure(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_construct(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void load_structure(dbref player, char *buff, char **bufc, char *inst_name, char *str_name, char *raw_text, char sep, int use_def_delim);
extern void fun_load(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_read(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_delimit(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_z(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_modify(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void unload_structure(dbref player, char *buff, char **bufc, char *inst_name, char sep, int use_def_delim);
extern void fun_unload(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_write(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_destruct(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_unstructure(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lstructures(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_linstances(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void structure_clr(dbref thing);
extern void stack_clr(dbref thing);
extern int stack_set(dbref thing, OBJSTACK *sp);
extern void fun_empty(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_items(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_push(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_dup(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_swap(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void handle_pop(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_popn(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_lstack(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void perform_regedit(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_wildparse(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void perform_regparse(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void perform_regrab(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void perform_regmatch(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_until(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void perform_grep(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void grid_free(dbref thing, OBJGRID *ogp);
extern void fun_gridmake(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_gridsize(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_gridset(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);
extern void fun_grid(char *buff, char **bufc, dbref player, dbref caller, dbref cause, char *fargs[], int nfargs, char *cargs[], int ncargs);

/* game.c */
extern pid_t isrunning(char *pidfile);
extern int fileexist(char *file);
extern void handlestartupflatfiles(int flag);
extern int tailfind(char *file, char *key);
extern void do_dump(dbref player, dbref cause, int key);
extern void do_hashresize(dbref player, dbref cause, int key);
extern int regexp_match(char *pattern, char *str, int case_opt, char *args[], int nargs);
extern int atr_match1(dbref thing, dbref parent, dbref player, char type, char *str, char *raw_str, int check_exclude, int hash_insert);
extern int atr_match(dbref thing, dbref player, char type, char *str, char *raw_str, int check_parents);
extern int check_filter(dbref object, dbref player, int filter, const char *msg);
extern char *add_prefix(dbref object, dbref player, int prefix, const char *msg, const char *dflt);
extern char *dflt_from_msg(dbref sender, dbref sendloc);
extern void html_escape(const char *src, char *dest, char **destp);
extern void notify_check(dbref target, dbref sender, int key, const char *format, ...);
extern void notify_except(dbref loc, dbref player, dbref exception, int flags, const char *format, ...);
extern void notify_except2(dbref loc, dbref player, dbref exc1, dbref exc2, int flags, const char *format, ...);
extern void report_timecheck(dbref player, int yes_screen, int yes_log, int yes_clear);
extern void do_timecheck(dbref player, dbref cause, int key);
extern char **add_array(char **b, char *s, int *i);
extern int backup_copy(char *src, char *dst, int flag);
extern char *mktimestamp(void);
extern void do_backup_mush(dbref player, dbref cause, int key);
extern int backup_mush(dbref player, dbref cause, int key);
extern int copy_file(char *src, char *dst, int flag);
extern pid_t write_pidfile(char *fn);
extern FILE *fmkstemp(char *template);
extern void write_status_file(dbref player, char *message);
extern void do_shutdown(dbref player, dbref cause, int key, char *message);
extern void dump_database_internal(int dump_type);
extern void dump_database(void);
extern void fork_and_dump(dbref player, dbref cause, int key);
extern void call_all_modules_nocache(char *xfn);
extern int load_game(void);
extern int list_check(dbref thing, dbref player, char type, char *str, char *raw_str, int check_parent, int *stop_status);
extern int Hearer(dbref thing);
extern void do_logwrite(dbref player, dbref cause, int key, char *msgtype, char *message);
extern void do_readcache(dbref player, dbref cause, int key);
extern void process_preload(void);
extern void info(int fmt, int flags, int ver);
extern void usage_dbconvert(void);
extern void usage_dbrecover(void);
extern void usage(char *prog, int which);
extern void recover_flatfile(char *flat);
extern int dbconvert(int argc, char *argv[]);
extern int main(int argc, char *argv[]);
extern void init_rlimit(void);

/* help.c */
extern int helpmkindx_dump_entries(FILE *wfp, long pos, help_indx_list *entries);
extern int helpmkindx(dbref player, char *confcmd, char *helpfile);
extern int helpindex_read(HASHTAB *htab, char *filename);
extern void helpindex_load(dbref player);
extern void helpindex_init(void);
extern void help_write(dbref player, char *topic, HASHTAB *htab, char *filename, int eval);
extern void help_helper(dbref player, int hf_num, int eval, char *topic, char *buff, char **bufc);
extern void do_help(dbref player, dbref cause, int key, char *message);

/* htab.c */
extern int hashval(char *str, int hashmask);
extern int get_hashmask(int *size);
extern void hashinit(HASHTAB *htab, int size, int flags);
extern void hashreset(HASHTAB *htab);
extern int *hashfind_generic(HASHKEY key, HASHTAB *htab);
extern int hashfindflags_generic(HASHKEY key, HASHTAB *htab);
extern CF_Result hashadd_generic(HASHKEY key, int *hashdata, HASHTAB *htab, int flags);
extern void hashdelete_generic(HASHKEY key, HASHTAB *htab);
extern void hashdelall(int *old, HASHTAB *htab);
extern void hashflush(HASHTAB *htab, int size);
extern int hashrepl_generic(HASHKEY key, int *hashdata, HASHTAB *htab);
extern void hashreplall(int *old, int *new, HASHTAB *htab);
extern char *hashinfo(const char *tab_name, HASHTAB *htab);
extern int *hash_firstentry(HASHTAB *htab);
extern int *hash_nextentry(HASHTAB *htab);
extern HASHKEY hash_firstkey_generic(HASHTAB *htab);
extern HASHKEY hash_nextkey_generic(HASHTAB *htab);
extern void hashresize(HASHTAB *htab, int min_size);
extern int search_nametab(dbref player, NAMETAB *ntab, char *flagname);
extern NAMETAB *find_nametab_ent(dbref player, NAMETAB *ntab, char *flagname);
extern NAMETAB *find_nametab_ent_flag(dbref player, NAMETAB *ntab, int flag);
extern void display_nametab(dbref player, NAMETAB *ntab, _Bool list_if_none, const char *format, ...);
extern void interp_nametab(dbref player, NAMETAB *ntab, int flagword, char *prefix, char *state, char *true_text, char *false_text, _Bool show_sep);
extern void listset_nametab(dbref player, NAMETAB *ntab, int flagword, _Bool list_if_none, char *format, ...);
extern int cf_ntab_access(int *vp, char *str, long extra, dbref player, char *cmd);

/* log.c */
extern char *logfile_init(char *filename);
extern void logfile_move(char *oldfn, char *newfn);
extern int start_log(const char *primary, const char *secondary, int key);
extern void end_log(void);
extern void _log_perror(const char *file, int line, const char *primary, const char *secondary, const char *extra, const char *failing_object);
extern void _log_write(const char *file, int line, int key, const char *primary, const char *secondary, const char *format, ...);
extern void log_write_raw(int key, const char *format, ...);
extern char *log_getname(dbref target);
extern char *log_gettype(dbref thing, char *d);
extern void do_logrotate(dbref player, dbref cause, int key);
extern void logfile_close(void);

/* look.c */
extern int did_attr(dbref player, dbref thing, int what);
extern void look_exits(dbref player, dbref loc, const char *exit_name);
extern void look_contents(dbref player, dbref loc, const char *contents_name, int style);
extern char *pairColor(int color);
extern char *pairRevColor(int color);
extern void pairs_print(dbref player, char *atext, char *buff, char **bufc);
extern void pretty_format(char *dest, char **cp, char *p);
extern void pretty_print(char *dest, char *name, char *text);
extern void view_atr(dbref player, dbref thing, ATTR *ap, char *raw_text, dbref aowner, int aflags, int skip_tag, int is_special);
extern void look_atrs1(dbref player, dbref thing, dbref othing, int check_exclude, int hash_insert, int is_special);
extern void look_atrs(dbref player, dbref thing, int check_parents, int is_special);
extern void look_simple(dbref player, dbref thing, int obey_terse);
extern void show_a_desc(dbref player, dbref loc, const char *msg);
extern void show_desc(dbref player, dbref loc, int key);
extern void look_in(dbref player, dbref loc, int key);
extern void look_here(dbref player, dbref thing, int key, int look_key);
extern void do_look(dbref player, dbref cause, int key, char *name);
extern void debug_examine(dbref player, dbref thing);
extern void exam_wildattrs(dbref player, dbref thing, int do_parent, int is_special);
extern void do_examine(dbref player, dbref cause, int key, char *name);
extern void do_score(dbref player, dbref cause, int key);
extern void do_inventory(dbref player, dbref cause, int key);
extern void do_entrances(dbref player, dbref cause, int key, char *name);
extern void sweep_check(dbref player, dbref what, int key, int is_loc);
extern void do_sweep(dbref player, dbref cause, int key, char *where);
extern void do_decomp(dbref player, dbref cause, int key, char *name, char *qual);
extern void show_vrml_url(dbref thing, dbref loc);

/* match.c */
extern void init_mstate(void);
extern void promote_match(dbref what, int confidence);
extern void munge_space_for_match(const char *name);
extern void match_player(void);
extern dbref absolute_nref(char *str);
extern dbref absolute_name(int need_pound);
extern void match_absolute(void);
extern void match_numeric(void);
extern void match_me(void);
extern void match_home(void);
extern void match_here(void);
extern void match_list(dbref first, int local);
extern void match_possession(void);
extern void match_neighbor(void);
extern int match_exit_internal(dbref loc, dbref baseloc, int local);
extern void match_exit(void);
extern void match_exit_with_parents(void);
extern void match_carried_exit(void);
extern void match_carried_exit_with_parents(void);
extern void match_master_exit(void);
extern void match_zone_exit(void);
extern void match_everything(int key);
extern dbref match_result(void);
extern dbref last_match_result(void);
extern dbref match_status(dbref player, dbref match);
extern dbref noisy_match_result(void);
extern void save_match_state(MSTATE *m_state);
extern void restore_match_state(MSTATE *m_state);
extern void init_match(dbref player, const char *name, int type);
extern void init_match_check_keys(dbref player, const char *name, int type);

/* mguests.c */
extern dbref create_guest(int num);
extern void destroy_guest(dbref guest);
extern char *make_guest(DESC *d);

/* move.c */
extern void process_leave_loc(dbref thing, dbref dest, dbref cause, int canhear, int hush);
extern void process_enter_loc(dbref thing, dbref src, dbref cause, int canhear, int hush);
extern void move_object(dbref thing, dbref dest);
extern void send_dropto(dbref thing, dbref player);
extern void process_sticky_dropto(dbref loc, dbref player);
extern void process_dropped_dropto(dbref thing, dbref player);
extern void move_via_generic(dbref thing, dbref dest, dbref cause, int hush);
extern void move_via_exit(dbref thing, dbref dest, dbref cause, dbref exit, int hush);
extern int move_via_teleport(dbref thing, dbref dest, dbref cause, int hush);
extern dbref find_var_dest(dbref player, dbref exit);
extern void move_exit(dbref player, dbref exit, int divest, const char *failmsg, int hush);
extern void do_move(dbref player, dbref cause, int key, char *direction);
extern void do_get(dbref player, dbref cause, int key, char *what);
extern void do_drop(dbref player, dbref cause, int key, char *name);
extern void do_enter_internal(dbref player, dbref thing, int quiet);
extern void do_enter(dbref player, dbref cause, int key, char *what);
extern void do_leave(dbref player, dbref cause, int key);

/* nametabs.c */

/* netcommon.c */
extern struct timeval timeval_sub(struct timeval now, struct timeval then);
extern int msec_diff(struct timeval now, struct timeval then);
extern struct timeval msec_add(struct timeval t, int x);
extern struct timeval update_quotas(struct timeval last, struct timeval current);
extern void raw_notify_html(dbref player, const char *format, ...);
extern void raw_notify(dbref player, const char *format, ...);
extern void raw_notify_newline(dbref player);
extern void raw_broadcast(int inflags, char *template, ...);
extern void clearstrings(DESC *d);
extern void queue_write(DESC *d, const char *b, int n);
extern void queue_string(DESC *d, const char *format, ...);
extern void queue_rawstring(DESC *d, const char *format, ...);
extern void freeqs(DESC *d);
extern void desc_addhash(DESC *d);
extern void desc_delhash(DESC *d);
extern void welcome_user(DESC *d);
extern void save_command(DESC *d, CBLK *command);
extern void set_userstring(char **userstring, const char *command);
extern void parse_connect(const char *msg, char *command, char *user, char *pass);
extern char *time_format_1(time_t dt);
extern char *time_format_2(time_t dt);
extern void announce_connattr(DESC *d, dbref player, dbref loc, const char *reason, int num, int attr);
extern void announce_connect(dbref player, DESC *d, const char *reason);
extern void announce_disconnect(dbref player, DESC *d, const char *reason);
extern int boot_off(dbref player, char *message);
extern int boot_by_port(int port, int no_god, char *message);
extern void desc_reload(dbref player);
extern int fetch_idle(dbref target, int port_num);
extern int fetch_connect(dbref target, int port_num);
extern void check_idle(void);
extern char *trimmed_name(dbref player);
extern char *trimmed_site(char *name);
extern void dump_users(DESC *e, char *match, int key);
extern void dump_info(DESC *call_by);
extern void do_colormap(dbref player, dbref cause, int key, char *fstr, char *tstr);
extern char *sane_doing(char *arg, char *name);
extern void do_doing(dbref player, dbref cause, int key, char *arg);
extern void init_logout_cmdtab(void);
extern void failconn(const char *logcode, const char *logtype, const char *logreason, DESC *d, int disconnect_reason, dbref player, int filecache, char *motd_msg, char *command, char *user, char *password);
extern int check_connect(DESC *d, char *msg);
extern void logged_out_internal(DESC *d, int key, char *arg);
extern void do_command(DESC *d, char *command, int first);
extern void logged_out(dbref player, dbref cause, int key, char *arg);
extern void process_commands(void);
extern int site_check(struct in_addr host, SITE *site_list);
extern const char *stat_string(int strtype, int flag);
extern unsigned int mask_to_prefix(unsigned int mask_num);
extern void list_sites(dbref player, SITE *site_list, const char *header_txt, int stat_type, _Bool header, _Bool footer);
extern void list_siteinfo(dbref player);
extern void make_ulist(dbref player, char *buff, char **bufc);
extern void make_portlist(dbref player, dbref target, char *buff, char **bufc);
extern void make_sessioninfo(dbref player, dbref target, int port_num, char *buff, char **bufc);
extern char *get_doing(dbref target, int port_num);
extern dbref get_programmer(dbref target);
extern dbref find_connected_name(dbref player, char *name);
extern dbref find_connected_ambiguous(dbref player, char *name);

/* object.c */
extern void Log_pointer_err(dbref prior, dbref obj, dbref loc, dbref ref, const char *reftype, const char *errtype);
extern void Log_header_err(dbref obj, dbref loc, dbref val, int is_object, const char *valtype, const char *errtype);
extern void Log_simple_err(dbref obj, dbref loc, const char *errtype);
extern _Bool can_set_home(dbref player, dbref thing, dbref home);
extern dbref new_home(dbref player);
extern dbref clone_home(dbref player, dbref thing);
extern void update_newobjs(dbref player, dbref obj_num, int obj_type);
extern int ok_exit_name(char *name);
extern dbref create_obj(dbref player, int objtype, char *name, int cost);
extern void destroy_obj(dbref player, dbref obj);
extern void do_freelist(dbref player, dbref cause, int key, char *str);
extern void make_freelist(void);
extern void divest_object(dbref thing);
extern void empty_obj(dbref obj);
extern void destroy_exit(dbref exit);
extern void destroy_thing(dbref thing);
extern void destroy_player(dbref victim);
extern void purge_going(void);
extern void check_pennies(dbref thing, int limit, const char *qual);
extern void check_dead_refs(void);
extern void check_loc_exits(dbref loc);
extern void check_exit_chains(void);
extern void check_misplaced_obj(dbref *obj, dbref back, dbref loc);
extern void check_loc_contents(dbref loc);
extern void check_contents_chains(void);
extern void do_dbck(dbref player, dbref cause, int key);

/* player.c */
extern void decrypt_logindata(char *atrbuf, LDATA *info);
extern void encrypt_logindata(char *atrbuf, LDATA *info);
extern void record_login(dbref player, int isgood, char *ldate, char *lhost, char *lusername);
extern int check_pass(dbref player, const char *password);
extern dbref connect_player(char *name, char *password, char *host, char *username, char *ip_addr);
extern dbref create_player(char *name, char *password, dbref creator, int isrobot, int isguest);
extern void do_password(dbref player, dbref cause, int key, char *oldpass, char *newpass);
extern void disp_from_on(dbref player, char *dtm_str, char *host_str);
extern void do_last(dbref player, dbref cause, int key, char *who);
extern int add_player_name(dbref player, char *name);
extern int delete_player_name(dbref player, char *name);
extern dbref lookup_player(dbref doer, char *name, int check_who);
extern void load_player_names(void);
extern void badname_add(char *bad_name);
extern void badname_remove(char *bad_name);
extern int badname_check(char *bad_name);
extern void badname_list(dbref player, const char *prefix);

/* player_c.c */
extern void pcache_init(void);
extern void pcache_reload1(dbref player, PCACHE *pp);
extern PCACHE *pcache_find(dbref player);
extern void pcache_reload(dbref player);
extern void pcache_save(PCACHE *pp);
extern void pcache_trim(void);
extern void pcache_sync(void);
extern int a_Queue(dbref player, int adj);
extern void s_Queue(dbref player, int val);
extern int QueueMax(dbref player);
extern int Pennies(dbref obj);
extern void s_Pennies(dbref obj, int howfew);

/* powers.c */
extern int ph_any(dbref target, dbref player, POWER power, int fpowers, int reset);
extern int ph_god(dbref target, dbref player, POWER power, int fpowers, int reset);
extern int ph_wiz(dbref target, dbref player, POWER power, int fpowers, int reset);
extern int ph_wizroy(dbref target, dbref player, POWER power, int fpowers, int reset);
extern int ph_restrict_player(dbref target, dbref player, POWER power, int fpowers, int reset);
extern int ph_privileged(dbref target, dbref player, POWER power, int fpowers, int reset);
extern int ph_inherit(dbref target, dbref player, POWER power, int fpowers, int reset);
extern void init_powertab(void);
extern void display_powertab(dbref player);
extern POWERENT *find_power(dbref thing, char *powername);
extern int decode_power(dbref player, char *powername, POWERSET *pset);
extern void power_set(dbref target, dbref player, char *power, int key);
extern int has_power(dbref player, dbref it, char *powername);
extern char *power_description(dbref player, dbref target);
extern void decompile_powers(dbref player, dbref thing, char *thingname);
extern int cf_power_access(int *vp, char *str, long extra, dbref player, char *cmd);

/* predicates.c */
extern dbref insert_first(dbref head, dbref thing);
extern dbref remove_first(dbref head, dbref thing);
extern dbref reverse_list(dbref list);
extern int member(dbref thing, dbref list);
extern _Bool is_integer(char *str);
extern int is_number(char *str);
extern int could_doit(dbref player, dbref thing, int locknum);
extern int canpayquota(dbref player, dbref who, int cost, int objtype);
extern int pay_quota(dbref who, int cost, int objtype);
extern int canpayfees(dbref player, dbref who, int pennies, int quota, int objtype);
extern int type_quota(int objtype);
extern int payfor(dbref who, dbref cost);
extern int payfees(dbref who, int pennies, int quota, int objtype);
extern void add_quota(dbref who, int payment, int type);
extern void giveto(dbref who, int pennies);
extern int ok_name(const char *name);
extern int ok_player_name(const char *name);
extern int ok_attr_name(const char *attrname);
extern int ok_password(const char *password, dbref player);
extern void handle_ears(dbref thing, int could_hear, int can_hear);
extern void do_switch(dbref player, dbref cause, int key, char *expr, char *args[], int nargs, char *cargs[], int ncargs);
extern void do_end(dbref player, dbref cause, int key, char *condstr, char *cmdstr, char *args[], int nargs);
extern void do_hook(dbref player, dbref cause, int key, char *cmdname, char *target);
extern void do_addcommand(dbref player, dbref cause, int key, char *name, char *command);
extern void do_listcommands(dbref player, dbref cause, int key, char *name);
extern void do_delcommand(dbref player, dbref cause, int key, char *name, char *command);
extern void handle_prog(DESC *d, char *message);
extern int ok_program(dbref player, dbref doer);
extern void do_quitprog(dbref player, dbref cause, int key, char *name);
extern void do_prog(dbref player, dbref cause, int key, char *name, char *command);
extern void do_restart(dbref player, dbref cause, int key);
extern void do_comment(dbref player, dbref cause, int key);
extern void do_eval(dbref player, dbref cause, int key, char *str);
extern dbref promote_dflt(dbref old, dbref new);
extern dbref match_possessed(dbref player, dbref thing, char *target, dbref dflt, int check_enter);
extern void parse_range(char **name, dbref *low_bound, dbref *high_bound);
extern int parse_thing_slash(dbref player, char *thing, char **after, dbref *it);
extern int get_obj_and_lock(dbref player, char *what, dbref *it, ATTR **attr, char *errmsg, char **bufc);
extern dbref where_is(dbref what);
extern dbref where_room(dbref what);
extern int locatable(dbref player, dbref it, dbref cause);
extern int nearby(dbref player, dbref thing);
extern char *master_attr(dbref player, dbref thing, int what, char **sargs, int nsargs, int *f_ptr);
extern void did_it(dbref player, dbref thing, int what, const char *def, int owhat, const char *odef, int awhat, int ctrl_flags, char *args[], int nargs, int msg_key);
extern void do_verb(dbref player, dbref cause, int key, char *victim_str, char *args[], int nargs);
extern void do_include(dbref player, dbref cause, int key, char *object, char *argv[], int nargs, char *cargs[], int ncargs);
extern void do_redirect(dbref player, dbref cause, int key, char *from_name, char *to_name);
extern void do_reference(dbref player, dbref cause, int key, char *ref_name, char *obj_name);

/* quota.c */
extern void load_quota(int q_list[], dbref player, int qtype);
extern void save_quota(int q_list[], dbref player, int qtype);
extern void count_objquota(dbref player, int *aq, int *rq, int *eq, int *tq, int *pq);
extern void adjust_quota(dbref player, int qtype, int value, int key);
extern void mung_quotas(dbref player, int key, int value);
extern void show_quota(dbref player, dbref victim);
extern void show_quota_header(dbref player);
extern void do_quota(dbref player, dbref cause, int key, char *arg1, char *arg2);

/* recover.c */
extern void gdbm_panic(const char *mesg);
extern int dbrecover(int argc, char *argv[]);

/* rob.c */
extern void do_kill(dbref player, dbref cause, int key, char *what, char *costchar);
extern void give_thing(dbref giver, dbref recipient, int key, char *what);
extern void give_money(dbref giver, dbref recipient, int key, int amount);
extern void do_give(dbref player, dbref cause, int key, char *who, char *amnt);

/* set.c */
extern dbref match_controlled(dbref player, const char *name);
extern dbref match_controlled_quiet(dbref player, const char *name);
extern dbref match_affected(dbref player, const char *name);
extern void do_chzone(dbref player, dbref cause, int key, const char *name, const char *newobj);
extern void do_name(dbref player, dbref cause, int key, const char *name, char *newname);
extern void set_player_aliases(dbref player, dbref target, char *oldalias, char *list, int aflags);
extern void do_alias(dbref player, dbref cause, int key, char *name, char *alias);
extern void do_lock(dbref player, dbref cause, int key, char *name, char *keytext);
extern void do_unlock(dbref player, dbref cause, int key, char *name);
extern void do_unlink(dbref player, dbref cause, int key, char *name);
extern void do_chown(dbref player, dbref cause, int key, char *name, char *newown);
extern void set_attr_internal(dbref player, dbref thing, int attrnum, char *attrtext, int key, char *buff, char **bufc);
extern void do_set(dbref player, dbref cause, int key, char *name, char *flag);
extern void do_power(dbref player, dbref cause, int key, char *name, char *flag);
extern void do_setattr(dbref player, dbref cause, int attrnum, char *name, char *attrtext);
extern void do_cpattr(dbref player, dbref cause, int key, char *oldpair, char *newpair[], int nargs);
extern void do_mvattr(dbref player, dbref cause, int key, char *what, char *args[], int nargs);
extern int parse_attrib(dbref player, char *str, dbref *thing, int *atr, int ok_structs);
extern void find_wild_attrs(dbref player, dbref thing, char *str, int check_exclude, int hash_insert, int get_locks, int ok_structs);
extern int parse_attrib_wild(dbref player, char *str, dbref *thing, int check_parents, int get_locks, int df_star, int ok_structs);
extern void edit_string_ansi(char *src, char **dst, char **returnstr, char *from, char *to);
extern void do_edit(dbref player, dbref cause, int key, char *it, char *args[], int nargs);
extern void do_wipe(dbref player, dbref cause, int key, char *it);
extern void do_trigger(dbref player, dbref cause, int key, char *object, char *argv[], int nargs);
extern void do_use(dbref player, dbref cause, int key, char *object);
extern void do_setvattr(dbref player, dbref cause, int key, char *arg1, char *arg2);

/* speech.c */
extern int sp_ok(dbref player);
extern void say_shout(int target, const char *prefix, int flags, dbref player, char *message);
extern void do_think(dbref player, dbref cause, int key, char *message);
extern int check_speechformat(dbref player, dbref speaker, dbref loc, dbref thing, char *message, int key);
extern void format_speech(dbref player, dbref speaker, dbref loc, char *message, int key);
extern void do_say(dbref player, dbref cause, int key, char *message);
extern void page_return(dbref player, dbref target, const char *tag, int anum, const char *format, ...);
extern int page_check(dbref player, dbref target);
extern void do_page(dbref player, dbref cause, int key, char *tname, char *message);
extern void do_reply_page(dbref player, dbref cause, int key, char *msg);
extern void whisper_pose(dbref player, dbref target, char *message);
extern void do_pemit_list(dbref player, char *list, const char *message, int do_contents);
extern void do_pemit(dbref player, dbref cause, int key, char *recipient, char *message);

/* stringutil.c */
extern char *ansiChar(int ch);
extern int ansiNum(int ch);
extern char ansiLetter(int num);
extern char ansiMushCode(int num, _Bool bg);
extern int ansiBitsMask(int num);
extern int ansiBits(int num);
extern char *strip_ansi(const char *s);
extern char *strip_xterm(char *s);
extern char *strip_24bit(char *s);
extern int strip_ansi_len(const char *s);
extern char *normal_to_white(const char *raw);
extern char *ansi_transition_esccode(int ansi_before, int ansi_after);
extern char *ansi_transition_mushcode(int ansi_before, int ansi_after);
extern char *ansi_transition_letters(int ansi_before, int ansi_after);
extern int ansi_map_states(const char *s, int **m, char **p);
extern char *remap_colors(const char *s, int *cmap);
extern char *translate_string(char *str, int type);
extern int rgb2xterm(long rgb);
extern int str2xterm(char *str);
extern char *upcasestr(char *s);
extern char *munge_space(char *string);
extern char *trim_spaces(char *string);
extern char *grabto(char **str, char targ);
extern int string_compare(const char *s1, const char *s2);
extern int string_prefix(const char *string, const char *prefix);
extern const char *string_match(const char *src, const char *sub);
extern char *replace_string(const char *old, const char *new, const char *string);
extern void edit_string(char *src, char **dst, char *from, char *to);
extern int minmatch(char *str, char *target, int min);
extern int matches_exit_from_list(char *exit_list, char *pattern);
extern char *ltos(long num);
extern char *repeatchar(int count, char ch);
extern void skip_esccode(char **s);
extern void copy_esccode(char **s, char **t);
extern void safe_copy_esccode(char **s, char *buff, char **bufc);
extern void track_ansi_letters(char *t, int *ansi_state);

/* timer.c */
extern void check_cron(void);
extern char *parse_cronlist(dbref player, unsigned char *bits, int low, int high, char *bufp);
extern int call_cron(dbref player, dbref thing, int attrib, char *timestr);
extern void do_cron(dbref player, dbref cause, int key, char *objstr, char *timestr);
extern int cron_clr(dbref thing, int attr);
extern void do_crondel(dbref player, dbref cause, int key, char *objstr);
extern void do_crontab(dbref player, dbref cause, int key, char *objstr);
extern void init_timer(void);
extern void dispatch(void);
extern void do_timewarp(dbref player, dbref cause, int key, char *arg);

/* udb_misc.c */
extern void log_db_err(int obj, int attr, const char *txt);
extern void warning(char *p, ...);
extern void fatal(char *p, ...);

/* udb_obj.c */
extern UDB_OBJECT *unroll_obj(char *data);
extern char *rollup_obj(UDB_OBJECT *o);
extern int obj_siz(UDB_OBJECT *o);
extern void objfree(UDB_OBJECT *o);
extern char *obj_get_attrib(int anam, UDB_OBJECT *obj);
extern void obj_set_attrib(int anam, UDB_OBJECT *obj, char *value);
extern void obj_del_attrib(int anam, UDB_OBJECT *obj);
extern UDB_OBJECT *get_free_objpipe(unsigned int obj);
extern char *pipe_get_attrib(int anum, unsigned int obj);
extern void pipe_set_attrib(int anum, unsigned int obj, char *value);
extern void pipe_del_attrib(int anum, unsigned int obj);
extern void attrib_sync(void);

/* udb_ocache.c */
extern int cachehash(void *keydata, int keylen, unsigned int type);
extern void cache_repl(UDB_CACHE *cp, void *new, int len, unsigned int type, unsigned int flags);
extern int cache_init(int width);
extern void cache_reset(void);
extern void list_cached_objs(dbref player);
extern void list_cached_attrs(dbref player);
extern UDB_DATA cache_get(UDB_DATA key, unsigned int type);
extern int cache_put(UDB_DATA key, UDB_DATA data, unsigned int type);
extern UDB_CACHE *get_free_entry(int atrsize);
extern int cache_write(UDB_CACHE *cp);
extern int cache_sync(void);
extern void cache_del(UDB_DATA key, unsigned int type);

/* udb_ochunk.c */
extern void dddb_setsync(int flag);
extern void dbm_error(const char *msg);
extern int dddb_optimize(void);
extern int dddb_init(void);
extern int dddb_setfile(char *fil);
extern _Bool dddb_close(void);
extern UDB_DATA db_get(UDB_DATA gamekey, unsigned int type);
extern int db_put(UDB_DATA gamekey, UDB_DATA gamedata, unsigned int type);
extern int db_del(UDB_DATA gamekey, unsigned int type);
extern void db_lock(void);
extern void db_unlock(void);

/* unparse.c */
extern char *unparse_object_quiet(dbref loc);
extern void unparse_boolexp1(dbref player, BOOLEXP *b, char outer_type, int format, char *boolexp_buf, char **buftop);
extern char *unparse_boolexp_quiet(dbref player, BOOLEXP *b);
extern char *unparse_boolexp(dbref player, BOOLEXP *b);
extern char *unparse_boolexp_decompile(dbref player, BOOLEXP *b);
extern char *unparse_boolexp_function(dbref player, BOOLEXP *b);

/* vattr.c */
extern void vattr_init(void);
extern VATTR *vattr_find(char *name);
extern VATTR *vattr_alloc(char *name, int flags);
extern VATTR *vattr_define(char *name, int number, int flags);
extern void vattr_delete(char *name);
extern VATTR *vattr_rename(char *name, char *newname);
extern VATTR *vattr_first(void);
extern VATTR *vattr_next(VATTR *vp);
extern void fixcase(char *name);
extern char *store_string(char *str);

/* version.c */
extern void do_version(dbref player, dbref cause, int extra);
extern void init_version(void);
extern void log_version(void);

/* vt100.c */
extern xyzColor rgbToXyz(rgbColor rgb);
extern CIELABColor xyzToCIELAB(xyzColor xyz);
extern float getColorDeltaE(rgbColor c1, rgbColor c2);
extern COLORMATCH getColorMatch(rgbColor rgb, COLORINFO palette[]);
extern char *TrueColor2VT100(rgbColor rgb, _Bool background);
extern char *X112VT100(uint8_t color, _Bool background);
extern char *Ansi2VT100(uint8_t color, _Bool background);
extern rgbColor X112RGB(int color);
extern uint8_t RGB2X11(rgbColor rgb);
extern uint8_t X112Ansi(int color);
extern uint8_t RGB2Ansi(rgbColor rgb);

/* walkdb.c */
extern void bind_and_queue(dbref player, dbref cause, char *action, char *argstr, char *cargs[], int ncargs, int number, int now);
extern void do_dolist(dbref player, dbref cause, int key, char *list, char *command, char *cargs[], int ncargs);
extern void do_find(dbref player, dbref cause, int key, char *name);
extern int get_stats(dbref player, dbref who, STATS *info);
extern void do_stats(dbref player, dbref cause, int key, char *name);
extern int chown_all(dbref from_player, dbref to_player, dbref acting_player, int key);
extern void do_chownall(dbref player, dbref cause, int key, char *from, char *to);
extern void er_mark_disabled(dbref player);
extern int search_setup(dbref player, char *searchfor, SEARCH *parm);
extern void search_perform(dbref player, dbref cause, SEARCH *parm);
extern void search_mark(dbref player, int key);
extern void do_search(dbref player, dbref cause, int key, char *arg);
extern void mark_place(dbref loc);
extern void do_floaters(dbref player, dbref cause, int key, char *name);
extern void do_markall(dbref player, dbref cause, int key);
extern void do_apply_marked(dbref player, dbref cause, int key, char *command, char *cargs[], int ncargs);
extern void olist_push(void);
extern void olist_pop(void);
extern void olist_add(dbref item);
extern dbref olist_first(void);
extern dbref olist_next(void);

/* wild.c */
extern int check_literals(char *tstr, char *dstr);
extern int real_quick_wild(char *tstr, char *dstr);
extern int quick_wild(char *tstr, char *dstr);
extern int real_wild1(char *tstr, char *dstr, int arg);
extern int wild1(char *tstr, char *dstr, int arg);
extern int wild(char *tstr, char *dstr, char *args[], int nargs);
extern int wild_match(char *tstr, char *dstr);
extern int register_match(char *tstr, char *dstr, char *args[], int nargs);

/* wiz.c */
extern void do_teleport(dbref player, dbref cause, int key, char *arg1, char *arg2);
extern void do_force_prefixed(dbref player, dbref cause, int key, char *command, char *args[], int nargs);
extern void do_force(dbref player, dbref cause, int key, char *what, char *command, char *args[], int nargs);
extern void do_toad(dbref player, dbref cause, int key, char *toad, char *newowner);
extern void do_newpassword(dbref player, dbref cause, int key, char *name, char *password);
extern void do_boot(dbref player, dbref cause, int key, char *name);
extern void do_poor(dbref player, dbref cause, int key, char *arg1);
extern void do_cut(dbref player, dbref cause, int key, char *thing);
extern void do_motd(dbref player, dbref cause, int key, char *message);
extern void do_global(dbref player, dbref cause, int key, char *flag);

#endif /* __PROTOTYPES_H */
